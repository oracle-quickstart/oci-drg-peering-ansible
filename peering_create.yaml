- hosts: localhost
  collections: oracle.oci

  tasks:
    #### Create and Prepare Remote peering connections
    - name: first Create remote_peering_connection
      oci_network_remote_peering_connection:
        compartment_id: "{{ compartment_first }}"
        drg_id: "{{ first_drg }}"
      register: first_result
    - set_fact:
        first_rpc_id: "{{ first_result.remote_peering_connection.id }}"

    - name: second Create remote_peering_connection
      oci_network_remote_peering_connection:
        compartment_id: "{{ compartment_second }}"
        drg_id: "{{ second_drg }}"
        region: "{{ second_region }}"
      register: second_result
    - set_fact:
        second_rpc_id: "{{ second_result.remote_peering_connection.id }}"

    - name: first&second Perform action connect on remote_peering_connection
      oci_network_remote_peering_connection_actions:
        remote_peering_connection_id: "{{ first_rpc_id }}"
        peer_id: "{{ second_rpc_id }}"
        peer_region_name: "{{ second_region }}"
        action: connect

    ##### Prepare Route Table rules
    - name: first List route_tables
      oci_network_route_table_facts:
        compartment_id: "{{ compartment_first }}"
        vcn_id: "{{ first_vcn_id }}"
      register: route_tables_first
    - set_fact:
        rts_first: "{{ route_tables_first.route_tables }}"

    - name: first List Security Lists
      oci_network_security_list_facts:
        compartment_id: "{{ compartment_first }}"
        vcn_id: "{{ first_vcn_id }}"
      register: sl_first
    - set_fact:
        sls_first: "{{ sl_first.security_lists }}"

    - name: first Get a specific vcn
      oci_network_vcn_facts:
        vcn_id: "{{ first_vcn_id }}"
      register: firstvcn
    - set_fact:
        cidr_first: "{{ firstvcn.vcns[0].cidr_block }}"

    - name: second List route_tables
      oci_network_route_table_facts:
        compartment_id: "{{ compartment_second }}"
        vcn_id: "{{ second_vcn_id }}"
        region: "{{ second_region }}"
      register: route_tables_first
    - set_fact:
        rts_second: "{{ route_tables_first.route_tables }}"

    - name: second List Security Lists
      oci_network_security_list_facts:
        compartment_id: "{{ compartment_second }}"
        vcn_id: "{{ second_vcn_id }}"
        region: "{{ second_region }}"
      register: sl_second
    - set_fact:
        sls_second: "{{ sl_second.security_lists }}"

    - name: second Get a specific vcn
      oci_network_vcn_facts:
        vcn_id: "{{ second_vcn_id }}"
        region: "{{ second_region }}"
      register: secondvcn
    - set_fact:
        cidr_second: "{{ secondvcn.vcns[0].cidr_block }}"

    - name: first Update route_table using name
      oci_network_route_table:
        compartment_id: "{{ compartment_first }}"
        rt_id: "{{ item.id }}"
        route_rules:
          - destination: "{{ cidr_second }}"
            network_entity_id: "{{ first_drg }}"
        purge_route_rules: no
      loop: "{{ rts_first }}"

    - name: first Update Security List rules
      oci_network_security_list:
        compartment_id: "{{ compartment_first }}"
        security_list_id: "{{ item.id }}"
        ingress_security_rules:
          - protocol: "all"
            source: "{{ cidr_second }}"
        purge_security_rules: no
      loop: "{{ sls_first }}"

    - name: second Update route_table using name
      oci_network_route_table:
        compartment_id: "{{ compartment_second }}"
        rt_id: "{{ item.id }}"
        region: "{{ second_region }}"
        route_rules:
          - destination: "{{ cidr_first }}"
            network_entity_id: "{{ second_drg }}"
        purge_route_rules: no
      loop: "{{ rts_second }}"

    - name: second Update Security List rules
      oci_network_security_list:
        compartment_id: "{{ compartment_first }}"
        security_list_id: "{{ item.id }}"
        region: "{{ second_region }}"
        ingress_security_rules:
          - protocol: "all"
            source: "{{ cidr_first }}"
        purge_security_rules: no
      loop: "{{ sls_second }}"

    - name: read the inventory
      shell: cat route_table_inventory.ini
      register: rt_inventory

    - name: Write rpc_ids
      shell: |
        echo "\n" >> route_table_inventory.ini
        echo first_rpc_id={{ first_rpc_id }} >> route_table_inventory.ini
        echo second_rpc_id={{ second_rpc_id }} >> route_table_inventory.ini
      when: rt_inventory.stdout.find('remotepeeringconnection') == -1
